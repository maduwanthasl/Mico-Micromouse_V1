
Buzzer_effect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e4  080028e4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e4  080028e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e4  080028e4  000038e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028e8  080028e8  000038e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080028f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080028f8  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000744f  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a0  00000000  00000000  0000b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0000c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000710  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165e6  00000000  00000000  0000d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099b1  00000000  00000000  00023f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840e6  00000000  00000000  0002d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b19dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000b1a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b4128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002750 	.word	0x08002750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002750 	.word	0x08002750

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b0d9      	sub	sp, #356	@ 0x164
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fa2f 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f88b 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f939 	bl	8000bb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000942:	f000 f8c3 	bl	8000acc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000946:	2104      	movs	r1, #4
 8000948:	483f      	ldr	r0, [pc, #252]	@ (8000a48 <main+0x118>)
 800094a:	f001 f999 	bl	8001c80 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Super Mario theme song notes and durations */
  int melody[] = {
 800094e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a4c <main+0x11c>)
 8000950:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000954:	4611      	mov	r1, r2
 8000956:	22ac      	movs	r2, #172	@ 0xac
 8000958:	4618      	mov	r0, r3
 800095a:	f001 feeb 	bl	8002734 <memcpy>
    659, 659, 0, 659, 0, 523, 659, 784, 0, 392, 0, 523, 392, 330,
    440, 494, 466, 440, 392, 659, 784, 880, 698, 784, 659, 523, 587, 494,
    0, 659, 659, 0, 659, 0, 523, 659, 784, 0, 392, 0, 523, 392, 330
  };

  int noteDurations[] = {
 800095e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000962:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000966:	4a3a      	ldr	r2, [pc, #232]	@ (8000a50 <main+0x120>)
 8000968:	4618      	mov	r0, r3
 800096a:	4611      	mov	r1, r2
 800096c:	23ac      	movs	r3, #172	@ 0xac
 800096e:	461a      	mov	r2, r3
 8000970:	f001 fee0 	bl	8002734 <memcpy>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Play the melody
	    int size = sizeof(melody) / sizeof(melody[0]);
 8000974:	232b      	movs	r3, #43	@ 0x2b
 8000976:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

	    for (int i = 0; i < size; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000980:	e04e      	b.n	8000a20 <main+0xf0>
	        if (melody[i] == 0) {
 8000982:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800098c:	443b      	add	r3, r7
 800098e:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d104      	bne.n	80009a0 <main+0x70>
	            // Pause for a rest
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000996:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <main+0x118>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38
 800099e:	e02f      	b.n	8000a00 <main+0xd0>
	        } else {
	            __HAL_TIM_SET_AUTORELOAD(&htim2, melody[i]);
 80009a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80009aa:	443b      	add	r3, r7
 80009ac:	f853 2cb4 	ldr.w	r2, [r3, #-180]
 80009b0:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <main+0x118>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80009c0:	443b      	add	r3, r7
 80009c2:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <main+0x118>)
 80009ca:	60da      	str	r2, [r3, #12]
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, melody[i] /0.9);
 80009cc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80009d6:	443b      	add	r3, r7
 80009d8:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd09 	bl	80003f4 <__aeabi_i2d>
 80009e2:	a317      	add	r3, pc, #92	@ (adr r3, 8000a40 <main+0x110>)
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	f7ff fe98 	bl	800071c <__aeabi_ddiv>
 80009ec:	4602      	mov	r2, r0
 80009ee:	460b      	mov	r3, r1
 80009f0:	4915      	ldr	r1, [pc, #84]	@ (8000a48 <main+0x118>)
 80009f2:	680c      	ldr	r4, [r1, #0]
 80009f4:	4610      	mov	r0, r2
 80009f6:	4619      	mov	r1, r3
 80009f8:	f7ff ff78 	bl	80008ec <__aeabi_d2uiz>
 80009fc:	4603      	mov	r3, r0
 80009fe:	63a3      	str	r3, [r4, #56]	@ 0x38
	        }
	        HAL_Delay(noteDurations[i]);
 8000a00:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000a04:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000a08:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8000a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fa23 	bl	8000e5c <HAL_Delay>
	    for (int i = 0; i < size; i++) {
 8000a16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000a20:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8000a24:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbaa      	blt.n	8000982 <main+0x52>
	    }

	    // Silence the buzzer after the melody
	    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <main+0x118>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	639a      	str	r2, [r3, #56]	@ 0x38
	    HAL_Delay(5000); // Shorter delay before repeating
 8000a34:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a38:	f000 fa10 	bl	8000e5c <HAL_Delay>
  {
 8000a3c:	e79a      	b.n	8000974 <main+0x44>
 8000a3e:	bf00      	nop
 8000a40:	cccccccd 	.word	0xcccccccd
 8000a44:	3feccccc 	.word	0x3feccccc
 8000a48:	20000028 	.word	0x20000028
 8000a4c:	08002768 	.word	0x08002768
 8000a50:	08002814 	.word	0x08002814

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b090      	sub	sp, #64	@ 0x40
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2228      	movs	r2, #40	@ 0x28
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fe3a 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc72 	bl	8001374 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a96:	f000 f8a3 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fee0 	bl	8001878 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000abe:	f000 f88f 	bl	8000be0 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	@ 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afc:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b06:	227f      	movs	r2, #127	@ 0x7f
 8000b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b12:	2214      	movs	r2, #20
 8000b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b22:	4823      	ldr	r0, [pc, #140]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b24:	f001 f804 	bl	8001b30 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b2e:	f000 f857 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481c      	ldr	r0, [pc, #112]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b40:	f001 fa02 	bl	8001f48 <HAL_TIM_ConfigClockSource>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b4a:	f000 f849 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b4e:	4818      	ldr	r0, [pc, #96]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b50:	f001 f83d 	bl	8001bce <HAL_TIM_PWM_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b5a:	f000 f841 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4810      	ldr	r0, [pc, #64]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b6e:	f001 fd57 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b78:	f000 f832 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7c:	2360      	movs	r3, #96	@ 0x60
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2204      	movs	r2, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000b94:	f001 f916 	bl	8001dc4 <HAL_TIM_PWM_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b9e:	f000 f81f 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ba2:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <MX_TIM2_Init+0xe4>)
 8000ba4:	f000 f870 	bl	8000c88 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3738      	adds	r7, #56	@ 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000028 	.word	0x20000028

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_GPIO_Init+0x28>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <MX_GPIO_Init+0x28>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <MX_GPIO_Init+0x28>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_MspInit+0x60>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_MspInit+0x60>)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c60:	d10b      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_TIM_Base_MspInit+0x34>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_TIM_Base_MspInit+0x34>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_TIM_Base_MspInit+0x34>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca6:	d117      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_TIM_MspPostInit+0x58>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce0 <HAL_TIM_MspPostInit+0x58>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_TIM_MspPostInit+0x58>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <HAL_TIM_MspPostInit+0x5c>)
 8000cd4:	f000 f9ca 	bl	800106c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f874 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d4c:	f7ff fff8 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d52:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d68:	4c09      	ldr	r4, [pc, #36]	@ (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f001 fcb9 	bl	80026ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fdd9 	bl	8000930 <main>
  bx lr
 8000d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	080028ec 	.word	0x080028ec
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	20000074 	.word	0x20000074

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f92b 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff ff1a 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f935 	bl	8001052 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f90b 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a03      	ldr	r2, [pc, #12]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000070 	.word	0x20000070

08000e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <HAL_GetTick+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000070 	.word	0x20000070

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff0 	bl	8000e48 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffe0 	bl	8000e48 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff90 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff49 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff5e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb0 	bl	8000fc0 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b08b      	sub	sp, #44	@ 0x2c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e169      	b.n	8001354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001080:	2201      	movs	r2, #1
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8158 	bne.w	800134e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4a9a      	ldr	r2, [pc, #616]	@ (800130c <HAL_GPIO_Init+0x2a0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d05e      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
 80010a8:	4a98      	ldr	r2, [pc, #608]	@ (800130c <HAL_GPIO_Init+0x2a0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d875      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010ae:	4a98      	ldr	r2, [pc, #608]	@ (8001310 <HAL_GPIO_Init+0x2a4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d058      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
 80010b4:	4a96      	ldr	r2, [pc, #600]	@ (8001310 <HAL_GPIO_Init+0x2a4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d86f      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010ba:	4a96      	ldr	r2, [pc, #600]	@ (8001314 <HAL_GPIO_Init+0x2a8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d052      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
 80010c0:	4a94      	ldr	r2, [pc, #592]	@ (8001314 <HAL_GPIO_Init+0x2a8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d869      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010c6:	4a94      	ldr	r2, [pc, #592]	@ (8001318 <HAL_GPIO_Init+0x2ac>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d04c      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
 80010cc:	4a92      	ldr	r2, [pc, #584]	@ (8001318 <HAL_GPIO_Init+0x2ac>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d863      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010d2:	4a92      	ldr	r2, [pc, #584]	@ (800131c <HAL_GPIO_Init+0x2b0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d046      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
 80010d8:	4a90      	ldr	r2, [pc, #576]	@ (800131c <HAL_GPIO_Init+0x2b0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d85d      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d82a      	bhi.n	8001138 <HAL_GPIO_Init+0xcc>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d859      	bhi.n	800119a <HAL_GPIO_Init+0x12e>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <HAL_GPIO_Init+0x80>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	08001167 	.word	0x08001167
 80010f0:	08001141 	.word	0x08001141
 80010f4:	08001153 	.word	0x08001153
 80010f8:	08001195 	.word	0x08001195
 80010fc:	0800119b 	.word	0x0800119b
 8001100:	0800119b 	.word	0x0800119b
 8001104:	0800119b 	.word	0x0800119b
 8001108:	0800119b 	.word	0x0800119b
 800110c:	0800119b 	.word	0x0800119b
 8001110:	0800119b 	.word	0x0800119b
 8001114:	0800119b 	.word	0x0800119b
 8001118:	0800119b 	.word	0x0800119b
 800111c:	0800119b 	.word	0x0800119b
 8001120:	0800119b 	.word	0x0800119b
 8001124:	0800119b 	.word	0x0800119b
 8001128:	0800119b 	.word	0x0800119b
 800112c:	0800119b 	.word	0x0800119b
 8001130:	08001149 	.word	0x08001149
 8001134:	0800115d 	.word	0x0800115d
 8001138:	4a79      	ldr	r2, [pc, #484]	@ (8001320 <HAL_GPIO_Init+0x2b4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113e:	e02c      	b.n	800119a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e029      	b.n	800119c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	3304      	adds	r3, #4
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e024      	b.n	800119c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	3308      	adds	r3, #8
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e01f      	b.n	800119c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	330c      	adds	r3, #12
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e01a      	b.n	800119c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116e:	2304      	movs	r3, #4
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e013      	b.n	800119c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800117c:	2308      	movs	r3, #8
 800117e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	611a      	str	r2, [r3, #16]
          break;
 8001186:	e009      	b.n	800119c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001188:	2308      	movs	r3, #8
 800118a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	615a      	str	r2, [r3, #20]
          break;
 8001192:	e003      	b.n	800119c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x130>
          break;
 800119a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2bff      	cmp	r3, #255	@ 0xff
 80011a0:	d801      	bhi.n	80011a6 <HAL_GPIO_Init+0x13a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e001      	b.n	80011aa <HAL_GPIO_Init+0x13e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3304      	adds	r3, #4
 80011aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	@ 0xff
 80011b0:	d802      	bhi.n	80011b8 <HAL_GPIO_Init+0x14c>
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x152>
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	3b08      	subs	r3, #8
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	210f      	movs	r1, #15
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	6a39      	ldr	r1, [r7, #32]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	431a      	orrs	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80b1 	beq.w	800134e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x2b8>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <HAL_GPIO_Init+0x2b8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001324 <HAL_GPIO_Init+0x2b8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001204:	4a48      	ldr	r2, [pc, #288]	@ (8001328 <HAL_GPIO_Init+0x2bc>)
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a40      	ldr	r2, [pc, #256]	@ (800132c <HAL_GPIO_Init+0x2c0>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3f      	ldr	r2, [pc, #252]	@ (8001330 <HAL_GPIO_Init+0x2c4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1e8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3e      	ldr	r2, [pc, #248]	@ (8001334 <HAL_GPIO_Init+0x2c8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1e4>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3d      	ldr	r2, [pc, #244]	@ (8001338 <HAL_GPIO_Init+0x2cc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1e0>
 8001248:	2303      	movs	r3, #3
 800124a:	e006      	b.n	800125a <HAL_GPIO_Init+0x1ee>
 800124c:	2304      	movs	r3, #4
 800124e:	e004      	b.n	800125a <HAL_GPIO_Init+0x1ee>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x1ee>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_Init+0x1ee>
 8001258:	2300      	movs	r3, #0
 800125a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126a:	492f      	ldr	r1, [pc, #188]	@ (8001328 <HAL_GPIO_Init+0x2bc>)
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	492c      	ldr	r1, [pc, #176]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	4928      	ldr	r1, [pc, #160]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	4922      	ldr	r1, [pc, #136]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	60cb      	str	r3, [r1, #12]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	491e      	ldr	r1, [pc, #120]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4918      	ldr	r1, [pc, #96]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4914      	ldr	r1, [pc, #80]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d021      	beq.n	8001340 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	490e      	ldr	r1, [pc, #56]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e021      	b.n	800134e <HAL_GPIO_Init+0x2e2>
 800130a:	bf00      	nop
 800130c:	10320000 	.word	0x10320000
 8001310:	10310000 	.word	0x10310000
 8001314:	10220000 	.word	0x10220000
 8001318:	10210000 	.word	0x10210000
 800131c:	10120000 	.word	0x10120000
 8001320:	10110000 	.word	0x10110000
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000
 800132c:	40010800 	.word	0x40010800
 8001330:	40010c00 	.word	0x40010c00
 8001334:	40011000 	.word	0x40011000
 8001338:	40011400 	.word	0x40011400
 800133c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	4909      	ldr	r1, [pc, #36]	@ (8001370 <HAL_GPIO_Init+0x304>)
 800134a:	4013      	ands	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	3301      	adds	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae8e 	bne.w	8001080 <HAL_GPIO_Init+0x14>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	372c      	adds	r7, #44	@ 0x2c
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e272      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8087 	beq.w	80014a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001394:	4b92      	ldr	r3, [pc, #584]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b04      	cmp	r3, #4
 800139e:	d00c      	beq.n	80013ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a0:	4b8f      	ldr	r3, [pc, #572]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d112      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5e>
 80013ac:	4b8c      	ldr	r3, [pc, #560]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b8:	d10b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4b89      	ldr	r3, [pc, #548]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d06c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x12c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d168      	bne.n	80014a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e24c      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x76>
 80013dc:	4b80      	ldr	r3, [pc, #512]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7f      	ldr	r2, [pc, #508]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e02e      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b7b      	ldr	r3, [pc, #492]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7a      	ldr	r2, [pc, #488]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b78      	ldr	r3, [pc, #480]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a77      	ldr	r2, [pc, #476]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0xbc>
 8001416:	4b72      	ldr	r3, [pc, #456]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a71      	ldr	r2, [pc, #452]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6f      	ldr	r3, [pc, #444]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6e      	ldr	r2, [pc, #440]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 8001430:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6a      	ldr	r2, [pc, #424]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b68      	ldr	r3, [pc, #416]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a67      	ldr	r2, [pc, #412]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fcfa 	bl	8000e48 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fcf6 	bl	8000e48 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	@ 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e200      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b5d      	ldr	r3, [pc, #372]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xe4>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fce6 	bl	8000e48 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fce2 	bl	8000e48 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1ec      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b53      	ldr	r3, [pc, #332]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x10c>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ae:	4b4c      	ldr	r3, [pc, #304]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ba:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x18c>
 80014c6:	4b46      	ldr	r3, [pc, #280]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b43      	ldr	r3, [pc, #268]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x176>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c0      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4939      	ldr	r1, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff fc9b 	bl	8000e48 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc97 	bl	8000e48 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a1      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4927      	ldr	r1, [pc, #156]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_RCC_OscConfig+0x270>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fc7a 	bl	8000e48 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff fc76 	bl	8000e48 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e180      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03a      	beq.n	80015f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d019      	beq.n	80015be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_RCC_OscConfig+0x274>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fc5a 	bl	8000e48 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fc56 	bl	8000e48 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e160      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 fa9c 	bl	8001af4 <RCC_Delay>
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_RCC_OscConfig+0x274>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff fc40 	bl	8000e48 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	e00f      	b.n	80015ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc3c 	bl	8000e48 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d908      	bls.n	80015ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e146      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	42420000 	.word	0x42420000
 80015e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b92      	ldr	r3, [pc, #584]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e9      	bne.n	80015cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a6 	beq.w	8001752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b8b      	ldr	r3, [pc, #556]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10d      	bne.n	8001632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b88      	ldr	r3, [pc, #544]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a87      	ldr	r2, [pc, #540]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b85      	ldr	r3, [pc, #532]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b82      	ldr	r3, [pc, #520]	@ (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	@ (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fbfd 	bl	8000e48 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fbf9 	bl	8000e48 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b64      	cmp	r3, #100	@ 0x64
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e103      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x312>
 8001678:	4b6f      	ldr	r3, [pc, #444]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a6e      	ldr	r2, [pc, #440]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	e02d      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x334>
 800168e:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a69      	ldr	r2, [pc, #420]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a66      	ldr	r2, [pc, #408]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	e01c      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x356>
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a60      	ldr	r2, [pc, #384]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e00b      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 80016ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b58      	ldr	r3, [pc, #352]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a57      	ldr	r2, [pc, #348]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d015      	beq.n	8001716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbad 	bl	8000e48 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff fba9 	bl	8000e48 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0b1      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	4b4b      	ldr	r3, [pc, #300]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ee      	beq.n	80016f2 <HAL_RCC_OscConfig+0x37e>
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb97 	bl	8000e48 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb93 	bl	8000e48 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e09b      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ee      	bne.n	800171e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d105      	bne.n	8001752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001746:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a3b      	ldr	r2, [pc, #236]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8087 	beq.w	800186a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d061      	beq.n	800182c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d146      	bne.n	80017fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb67 	bl	8000e48 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff fb63 	bl	8000e48 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e06d      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d108      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4921      	ldr	r1, [pc, #132]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a19      	ldr	r1, [r3, #32]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	430b      	orrs	r3, r1
 80017ca:	491b      	ldr	r1, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb37 	bl	8000e48 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb33 	bl	8000e48 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x46a>
 80017fc:	e035      	b.n	800186a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_RCC_OscConfig+0x4cc>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fb20 	bl	8000e48 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff fb1c 	bl	8000e48 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e026      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x498>
 800182a:	e01e      	b.n	800186a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e019      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
 8001840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_RCC_OscConfig+0x500>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	429a      	cmp	r2, r3
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0d0      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d910      	bls.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b67      	ldr	r3, [pc, #412]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4965      	ldr	r1, [pc, #404]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b63      	ldr	r3, [pc, #396]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b8      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d4:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a58      	ldr	r2, [pc, #352]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ec:	4b53      	ldr	r3, [pc, #332]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b50      	ldr	r3, [pc, #320]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	494d      	ldr	r1, [pc, #308]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d040      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e07f      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e073      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06b      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4936      	ldr	r1, [pc, #216]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff fa6e 	bl	8000e48 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff fa6a 	bl	8000e48 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e053      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b27      	ldr	r3, [pc, #156]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d210      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0207 	bic.w	r2, r3, #7
 80019ae:	4922      	ldr	r1, [pc, #136]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e032      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4916      	ldr	r1, [pc, #88]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	490e      	ldr	r1, [pc, #56]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a06:	f000 f821 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	490a      	ldr	r1, [pc, #40]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	5ccb      	ldrb	r3, [r1, r3]
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <HAL_RCC_ClockConfig+0x1cc>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_RCC_ClockConfig+0x1d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f9cc 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	080028c0 	.word	0x080028c0
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x30>
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x36>
 8001a7a:	e027      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7e:	613b      	str	r3, [r7, #16]
      break;
 8001a80:	e027      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0c9b      	lsrs	r3, r3, #18
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0c5b      	lsrs	r3, r3, #17
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	4a11      	ldr	r2, [pc, #68]	@ (8001aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aae:	fb03 f202 	mul.w	r2, r3, r2
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e004      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	613b      	str	r3, [r7, #16]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ace:	613b      	str	r3, [r7, #16]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	693b      	ldr	r3, [r7, #16]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	007a1200 	.word	0x007a1200
 8001ae8:	080028d0 	.word	0x080028d0
 8001aec:	080028e0 	.word	0x080028e0
 8001af0:	003d0900 	.word	0x003d0900

08001af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <RCC_Delay+0x34>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <RCC_Delay+0x38>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b10:	bf00      	nop
  }
  while (Delay --);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <RCC_Delay+0x1c>
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	10624dd3 	.word	0x10624dd3

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff f87a 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 fab2 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e041      	b.n	8001c64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f839 	bl	8001c6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f000 fa63 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_TIM_PWM_Start+0x24>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e022      	b.n	8001cea <HAL_TIM_PWM_Start+0x6a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d109      	bne.n	8001cbe <HAL_TIM_PWM_Start+0x3e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	e015      	b.n	8001cea <HAL_TIM_PWM_Start+0x6a>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d109      	bne.n	8001cd8 <HAL_TIM_PWM_Start+0x58>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e008      	b.n	8001cea <HAL_TIM_PWM_Start+0x6a>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e05e      	b.n	8001db0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <HAL_TIM_PWM_Start+0x82>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d00:	e013      	b.n	8001d2a <HAL_TIM_PWM_Start+0xaa>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d104      	bne.n	8001d12 <HAL_TIM_PWM_Start+0x92>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d10:	e00b      	b.n	8001d2a <HAL_TIM_PWM_Start+0xaa>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d104      	bne.n	8001d22 <HAL_TIM_PWM_Start+0xa2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d20:	e003      	b.n	8001d2a <HAL_TIM_PWM_Start+0xaa>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fc50 	bl	80025d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001db8 <HAL_TIM_PWM_Start+0x138>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d107      	bne.n	8001d52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a18      	ldr	r2, [pc, #96]	@ (8001db8 <HAL_TIM_PWM_Start+0x138>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_TIM_PWM_Start+0xfa>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d64:	d009      	beq.n	8001d7a <HAL_TIM_PWM_Start+0xfa>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_TIM_PWM_Start+0x13c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_TIM_PWM_Start+0xfa>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_TIM_PWM_Start+0x140>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d111      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d010      	beq.n	8001dae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9c:	e007      	b.n	8001dae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e0ae      	b.n	8001f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	f200 809f 	bhi.w	8001f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	08001f31 	.word	0x08001f31
 8001e00:	08001f31 	.word	0x08001f31
 8001e04:	08001f31 	.word	0x08001f31
 8001e08:	08001e6d 	.word	0x08001e6d
 8001e0c:	08001f31 	.word	0x08001f31
 8001e10:	08001f31 	.word	0x08001f31
 8001e14:	08001f31 	.word	0x08001f31
 8001e18:	08001eaf 	.word	0x08001eaf
 8001e1c:	08001f31 	.word	0x08001f31
 8001e20:	08001f31 	.word	0x08001f31
 8001e24:	08001f31 	.word	0x08001f31
 8001e28:	08001eef 	.word	0x08001eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f9b2 	bl	800219c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6999      	ldr	r1, [r3, #24]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	619a      	str	r2, [r3, #24]
      break;
 8001e6a:	e064      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f9f8 	bl	8002268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6999      	ldr	r1, [r3, #24]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	021a      	lsls	r2, r3, #8
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
      break;
 8001eac:	e043      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fa41 	bl	800233c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0208 	orr.w	r2, r2, #8
 8001ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0204 	bic.w	r2, r2, #4
 8001ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69d9      	ldr	r1, [r3, #28]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
      break;
 8001eec:	e023      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa8b 	bl	8002410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69d9      	ldr	r1, [r3, #28]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	75fb      	strb	r3, [r7, #23]
      break;
 8001f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_ConfigClockSource+0x1c>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0b4      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x186>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f9c:	d03e      	beq.n	800201c <HAL_TIM_ConfigClockSource+0xd4>
 8001f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa2:	f200 8087 	bhi.w	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001faa:	f000 8086 	beq.w	80020ba <HAL_TIM_ConfigClockSource+0x172>
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb2:	d87f      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b70      	cmp	r3, #112	@ 0x70
 8001fb6:	d01a      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0xa6>
 8001fb8:	2b70      	cmp	r3, #112	@ 0x70
 8001fba:	d87b      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b60      	cmp	r3, #96	@ 0x60
 8001fbe:	d050      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x11a>
 8001fc0:	2b60      	cmp	r3, #96	@ 0x60
 8001fc2:	d877      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b50      	cmp	r3, #80	@ 0x50
 8001fc6:	d03c      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0xfa>
 8001fc8:	2b50      	cmp	r3, #80	@ 0x50
 8001fca:	d873      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	d058      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x13a>
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d86f      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd4:	2b30      	cmp	r3, #48	@ 0x30
 8001fd6:	d064      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd8:	2b30      	cmp	r3, #48	@ 0x30
 8001fda:	d86b      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d060      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x15a>
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d867      	bhi.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05c      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x15a>
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d05a      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x15a>
 8001fec:	e062      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ffe:	f000 facc 	bl	800259a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]
      break;
 800201a:	e04f      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800202c:	f000 fab5 	bl	800259a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800203e:	609a      	str	r2, [r3, #8]
      break;
 8002040:	e03c      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800204e:	461a      	mov	r2, r3
 8002050:	f000 fa2c 	bl	80024ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2150      	movs	r1, #80	@ 0x50
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fa83 	bl	8002566 <TIM_ITRx_SetConfig>
      break;
 8002060:	e02c      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800206e:	461a      	mov	r2, r3
 8002070:	f000 fa4a 	bl	8002508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2160      	movs	r1, #96	@ 0x60
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fa73 	bl	8002566 <TIM_ITRx_SetConfig>
      break;
 8002080:	e01c      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800208e:	461a      	mov	r2, r3
 8002090:	f000 fa0c 	bl	80024ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2140      	movs	r1, #64	@ 0x40
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fa63 	bl	8002566 <TIM_ITRx_SetConfig>
      break;
 80020a0:	e00c      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f000 fa5a 	bl	8002566 <TIM_ITRx_SetConfig>
      break;
 80020b2:	e003      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      break;
 80020b8:	e000      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <TIM_Base_SetConfig+0xb8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00b      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f6:	d007      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <TIM_Base_SetConfig+0xbc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0x30>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <TIM_Base_SetConfig+0xc0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <TIM_Base_SetConfig+0xb8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <TIM_Base_SetConfig+0xbc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <TIM_Base_SetConfig+0xc0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <TIM_Base_SetConfig+0xb8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800

0800219c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f023 0201 	bic.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 0302 	bic.w	r3, r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <TIM_OC1_SetConfig+0xc8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10c      	bne.n	8002212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0308 	bic.w	r3, r3, #8
 80021fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <TIM_OC1_SetConfig+0xc8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d111      	bne.n	800223e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	621a      	str	r2, [r3, #32]
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00

08002268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 0210 	bic.w	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800229e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0320 	bic.w	r3, r3, #32
 80022b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002338 <TIM_OC2_SetConfig+0xd0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10d      	bne.n	80022e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <TIM_OC2_SetConfig+0xd0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d113      	bne.n	8002314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40012c00 	.word	0x40012c00

0800233c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <TIM_OC3_SetConfig+0xd0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a14      	ldr	r2, [pc, #80]	@ (800240c <TIM_OC3_SetConfig+0xd0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d113      	bne.n	80023e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	621a      	str	r2, [r3, #32]
}
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00

08002410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800243e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800245a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	031b      	lsls	r3, r3, #12
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <TIM_OC4_SetConfig+0x98>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d109      	bne.n	8002484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	019b      	lsls	r3, r3, #6
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	621a      	str	r2, [r3, #32]
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40012c00 	.word	0x40012c00

080024ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f023 0201 	bic.w	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f023 030a 	bic.w	r3, r3, #10
 80024e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	621a      	str	r2, [r3, #32]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f023 0210 	bic.w	r2, r3, #16
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	031b      	lsls	r3, r3, #12
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002544:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	621a      	str	r2, [r3, #32]
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800257c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	f043 0307 	orr.w	r3, r3, #7
 8002588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr

0800259a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800259a:	b480      	push	{r7}
 800259c:	b087      	sub	sp, #28
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	021a      	lsls	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2201      	movs	r2, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	621a      	str	r2, [r3, #32]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e046      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	@ (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <__libc_init_array>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	2600      	movs	r6, #0
 80026f0:	4d0c      	ldr	r5, [pc, #48]	@ (8002724 <__libc_init_array+0x38>)
 80026f2:	4c0d      	ldr	r4, [pc, #52]	@ (8002728 <__libc_init_array+0x3c>)
 80026f4:	1b64      	subs	r4, r4, r5
 80026f6:	10a4      	asrs	r4, r4, #2
 80026f8:	42a6      	cmp	r6, r4
 80026fa:	d109      	bne.n	8002710 <__libc_init_array+0x24>
 80026fc:	f000 f828 	bl	8002750 <_init>
 8002700:	2600      	movs	r6, #0
 8002702:	4d0a      	ldr	r5, [pc, #40]	@ (800272c <__libc_init_array+0x40>)
 8002704:	4c0a      	ldr	r4, [pc, #40]	@ (8002730 <__libc_init_array+0x44>)
 8002706:	1b64      	subs	r4, r4, r5
 8002708:	10a4      	asrs	r4, r4, #2
 800270a:	42a6      	cmp	r6, r4
 800270c:	d105      	bne.n	800271a <__libc_init_array+0x2e>
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	f855 3b04 	ldr.w	r3, [r5], #4
 8002714:	4798      	blx	r3
 8002716:	3601      	adds	r6, #1
 8002718:	e7ee      	b.n	80026f8 <__libc_init_array+0xc>
 800271a:	f855 3b04 	ldr.w	r3, [r5], #4
 800271e:	4798      	blx	r3
 8002720:	3601      	adds	r6, #1
 8002722:	e7f2      	b.n	800270a <__libc_init_array+0x1e>
 8002724:	080028e4 	.word	0x080028e4
 8002728:	080028e4 	.word	0x080028e4
 800272c:	080028e4 	.word	0x080028e4
 8002730:	080028e8 	.word	0x080028e8

08002734 <memcpy>:
 8002734:	440a      	add	r2, r1
 8002736:	4291      	cmp	r1, r2
 8002738:	f100 33ff 	add.w	r3, r0, #4294967295
 800273c:	d100      	bne.n	8002740 <memcpy+0xc>
 800273e:	4770      	bx	lr
 8002740:	b510      	push	{r4, lr}
 8002742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002746:	4291      	cmp	r1, r2
 8002748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800274c:	d1f9      	bne.n	8002742 <memcpy+0xe>
 800274e:	bd10      	pop	{r4, pc}

08002750 <_init>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr

0800275c <_fini>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	bf00      	nop
 8002760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002762:	bc08      	pop	{r3}
 8002764:	469e      	mov	lr, r3
 8002766:	4770      	bx	lr
